/* tslint:disable */
/* eslint-disable */
/**
 * CodeHub API - version 1.0.0
 *
 * CodeHub 后端服务 API 文档
 *
 * OpenAPI version: 3.0.0
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type AddAcademicNavigatorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否添加成功
   * [required]
   */
  data: boolean;
};
export type AddAcademicNavigatorReq = {
  /**
   * 学历
   * [required]
   */
  education: string;
  /**
   * 内容
   * [required]
   */
  content: string;
  /**
   * 专业
   * [required]
   */
  major: string;
  /**
   * 学校
   * [required]
   */
  school: string;
  /**
   * 工作经验
   * [required]
   */
  work_exp: string;
};
export type DeleteAcademicNavigatorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否删除成功
   * [required]
   */
  data: boolean;
};
export type DeleteAcademicNavigatorReq = object;
export type CancelLikeAcademicNavigatorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否取消点赞成功
   * [required]
   */
  data: boolean;
};
export type CancelLikeAcademicNavigatorReq = object;
export type AcademicNavigator = {
  /**
   * 学术导航 ID
   * [required]
   */
  id: string;
  /**
   * 用户 ID
   * [required]
   */
  user_id: string;
  /**
   * 学历
   * [required]
   */
  education: string;
  /**
   * 内容
   * [required]
   */
  content: string;
  /**
   * 专业
   * [required]
   */
  major: string;
  /**
   * 学校
   * [required]
   */
  school: string;
  /**
   * 工作经验
   * [required]
   */
  work_exp: string;
  /**
   * 点赞数
   * [required]
   */
  like_count: number;
};
export type AcademicList = {
  /**
   * 总数
   * [required]
   */
  total: number;
  /**
   * 学术导航列表
   * [required]
   */
  list: AcademicNavigator[];
};
export type GetAcademicNavigatorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * AcademicList
   * ---
   * [required]
   */
  data: AcademicList;
};
export type PostAcademicNavigatorLikeResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否点赞成功
   * [required]
   */
  data: boolean;
};
export type PostAcademicNavigatorLikeReq = object;
export type ChatWithAIResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: string;
};
export type ChatWithAIReq = {
  /**
   * 内容
   * [required]
   */
  content: string;
};
export type CreateArticleResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 文章详情
   * [required]
   */
  data: string;
};
export type CreateArticleReq = {
  /**
   * 内容类型
   * [required]
   */
  type: 'article' | 'micro_post';
  /**
   * 标题
   */
  title?: string;
  /**
   * 内容
   * [required]
   */
  content: string;
  /**
   * 摘要
   */
  summary?: string;
  /**
   * 图片 URL 列表
   */
  imageIds?: string[];
  /**
   * 封面图片 URL
   */
  coverImageID?: string;
  /**
   * 标签列表
   */
  tags?: string[];
  /**
   * 文章状态
   * [required]
   */
  status: 'draft' | 'published';
  /**
   * 分类 ID
   * [required]
   */
  categoryId: string;
};
export type Article = {
  /**
   * 主键 ID
   * [required]
   */
  id: string;
  /**
   * 内容类型：长文或短文
   * [required]
   */
  type: string;
  /**
   * 标题
   * [required]
   */
  title: string;
  /**
   * 内容
   * [required]
   */
  content: string;
  /**
   * 摘要
   * [required]
   */
  summary: string;
  /**
   * 图片 URL 列表
   * [required]
   */
  imageUrls: string[];
  /**
   * 封面图片 URL
   * [required]
   */
  coverImage: string;
  /**
   * 作者 ID
   * [required]
   */
  authorId: string;
  /**
   * 标签列表
   * [required]
   */
  tags: string[];
  /**
   * 分类 ID
   * [required]
   */
  categoryId: string;
  /**
   * 阅读次数
   * [required]
   */
  viewCount: number;
  /**
   * 点赞次数
   * [required]
   */
  likeCount: number;
  /**
   * 是否已点赞
   * [required]
   */
  isLiked: boolean;
  /**
   * 是否已收藏
   * [required]
   */
  isFavorited: boolean;
  /**
   * 评论数
   * [required]
   */
  commentCount: number;
  /**
   * 文章状态
   * [required]
   */
  status: string;
  /**
   * 创建时间
   * [required]
   */
  createdAt: number;
  /**
   * 更新时间
   * [required]
   */
  updatedAt: number;
};
export type UserInfo = {
  /**
   * 用户ID
   * [required]
   */
  id: string;
  /**
   * 用户名
   * [required]
   */
  username: string;
  /**
   * 昵称
   * [required]
   */
  nickname: string;
  /**
   * 邮箱
   * [required]
   */
  email: string;
  /**
   * 手机号
   * [required]
   */
  phone: string;
  /**
   * 头像
   * [required]
   */
  avatar: string;
  /**
   * 性别 0:未知 1:男 2:女
   * [required]
   */
  gender: '0' | '1';
  /**
   * 年龄
   * [required]
   */
  age: number;
  /**
   * 状态 true:正常 false:禁用
   * [required]
   */
  status: boolean;
  /**
   * 角色 0:普通用户 1:管理员
   * [required]
   */
  is_admin: boolean;
  /**
   * 创建时间
   * [required]
   */
  create_at: number;
  /**
   * 更新时间
   * [required]
   */
  update_at: number;
  /**
   * 关注数量
   * [required]
   */
  follow_count: number;
  /**
   * 粉丝数量
   * [required]
   */
  fans_count: number;
  /**
   * 是否已关注
   * [required]
   */
  is_followed: boolean;
  /**
   * 文章数量
   * [required]
   */
  article_count: number;
};
export type GetArticle = {
  /**
   * Article
   * ---
   * [required]
   */
  article: Article;
  /**
   * UserInfo
   * ---
   * [required]
   */
  author: UserInfo;
};
export type GetArticleResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * GetArticle
   * ---
   * [required]
   */
  data: GetArticle;
};
export type ArticleExtra = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  view_count: number;
  /**
   * [required]
   */
  like_count: number;
  /**
   * [required]
   */
  comment_count: number;
  /**
   * [required]
   */
  is_liked: boolean;
  /**
   * [required]
   */
  is_favorited: boolean;
  /**
   * [required]
   */
  favorite_count: number;
};
export type GetArticleExtraResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * ArticleExtra
   * ---
   * [required]
   */
  data: ArticleExtra;
};
export type GetArticlesResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 文章列表
   * [required]
   */
  data: GetArticle[];
};
export type UpdateLikeCountResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否更新成功
   * [required]
   */
  data: boolean;
};
export type UpdateLikeCountReq = {
  /**
   * 文章 ID
   * [required]
   */
  id: string;
  /**
   * 操作类型, true:点赞, false:取消点赞
   * [required]
   */
  trigger: boolean;
};
export type GetArticleResponse = {
  /**
   * [required]
   */
  list: GetArticle[];
  /**
   * [required]
   */
  total: number;
};
export type GetArticlesByUserResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * GetArticleResponse
   * ---
   * [required]
   */
  data: GetArticleResponse;
};
export type DeleteArticleResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否删除成功
   * [required]
   */
  data: boolean;
};
export type DeleteArticleReq = object;
export type UpdateArticleResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否更新成功
   * [required]
   */
  data: boolean;
};
export type UpdateArticleReq = {
  /**
   * 标题
   */
  title?: string;
  /**
   * 内容
   */
  content?: string;
  /**
   * 摘要
   */
  summary?: string;
  /**
   * 图片 URL 列表
   */
  imageIds?: string[];
  /**
   * 封面图片 URL
   */
  coverImageID?: string;
  /**
   * 标签列表
   */
  tags?: string[];
  /**
   * 文章状态
   */
  status?: string;
  /**
   * 分类 ID
   * [required]
   */
  categoryId: string;
};
export type HealthResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否健康
   * [required]
   */
  data: boolean;
};
export type ImageInfo = {
  /**
   * 图片ID
   * [required]
   */
  image_id: string;
  /**
   * MinIO bucket名称
   * [required]
   */
  bucket_name: string;
  /**
   * MinIO中的对象名称
   * [required]
   */
  object_name: string;
  /**
   * 完整的访问URL
   * [required]
   */
  url: string;
  /**
   * 缩略图URL
   * [required]
   */
  thumbnail_url: string;
  /**
   * 文件MIME类型
   * [required]
   */
  content_type: string;
  /**
   * 文件大小(bytes)
   * [required]
   */
  size: number;
  /**
   * 图片宽度(px)
   * [required]
   */
  width: number;
  /**
   * 图片高度(px)
   * [required]
   */
  height: number;
  /**
   * 上传者IP
   * [required]
   */
  upload_ip: string;
  /**
   * 上传者ID
   * [required]
   */
  user_id: string;
  /**
   * 创建时间
   * [required]
   */
  created_at: number;
};
export type Comment = {
  /**
   * 评论ID
   * [required]
   */
  id: string;
  /**
   * 文章ID
   * [required]
   */
  entity_id: string;
  /**
   * 评论内容
   * [required]
   */
  content: string;
  /**
   * 根评论ID
   * [required]
   */
  root_id: string;
  /**
   * 父评论ID
   * [required]
   */
  parent_id: string;
  /**
   * 实体作者ID
   * [required]
   */
  entity_author_id: string;
  /**
   * UserInfo
   * ---
   * [required]
   */
  user_info: UserInfo;
  /**
   * 创建时间
   * [required]
   */
  created_at: number;
  /**
   * 更新时间
   * [required]
   */
  updated_at: number;
  /**
   * 子评论列表
   * [required]
   */
  replies: Comment[];
  /**
   * UserInfo
   * ---
   * [required]
   */
  reply_to_user_info: UserInfo;
  /**
   * 子评论数量
   * [required]
   */
  replies_count: number;
  /**
   * 点赞数
   * [required]
   */
  like_count: number;
  /**
   * 是否已点赞
   * [required]
   */
  is_liked: boolean;
  /**
   * 评论图片列表
   * [required]
   */
  images: ImageInfo[];
};
export type List = {
  /**
   * 评论列表
   * [required]
   */
  list: Comment[];
  /**
   * 总评论数
   * [required]
   */
  total: number;
};
export type GetCommentsResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * List
   * ---
   * [required]
   */
  data: List;
};
export type CreateCommentResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * Comment
   * ---
   * [required]
   */
  data: Comment;
};
export type CreateCommentReq = {
  /**
   * 文章ID
   * [required]
   */
  entity_id: string;
  /**
   * 评论内容
   * [required]
   */
  content: string;
  /**
   * 根评论ID
   * [required]
   */
  root_id: string;
  /**
   * 父评论ID（可选）
   * [required]
   */
  parent_id: string;
  /**
   * 实体作者ID
   * [required]
   */
  entity_author_id: string;
  /**
   * 回复的目标评论ID（可选）
   * [required]
   */
  reply_to_uid: string;
  /**
   * 图片ID列表
   * [required]
   */
  image_ids: string[];
};
export type GetCommentRepliesResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * List
   * ---
   * [required]
   */
  data: List;
};
export type UpdateCommentLikeCountResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 更新是否成功
   * [required]
   */
  data: boolean;
};
export type UpdateCommentLikeCountReq = {
  /**
   * 评论ID
   * [required]
   */
  comment_id: string;
  /**
   * 操作类型, true:点赞, false:取消点赞
   * [required]
   */
  trigger: boolean;
};
export type GetCommentResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * Comment
   * ---
   * [required]
   */
  data: Comment;
};
export type DeleteCommentResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 删除是否成功
   * [required]
   */
  data: boolean;
};
export type DeleteCommentReq = object;
export type CreateEmojiResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 表情包详情
   * [required]
   */
  data: boolean;
};
export type CreateEmojiReq = {
  /**
   * 表情包名称
   * [required]
   */
  code: string;
  /**
   * 描述
   * [required]
   */
  description: string;
  /**
   * 图片地址
   * [required]
   */
  url: string;
};
export type Emoji = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  code: string;
  /**
   * [required]
   */
  description: string;
  /**
   * [required]
   */
  url: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type EmojiList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: Emoji[];
};
export type GetEmojiListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * EmojiList
   * ---
   * [required]
   */
  data: EmojiList;
};
export type DeleteEmojiResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteEmojiReq = object;
export type CreateFavorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 收藏夹详情
   * [required]
   */
  data: boolean;
};
export type CreateFavorReq = {
  /**
   * 收藏夹 ID
   * [required]
   */
  foldId: string;
  /**
   * 实体 ID
   * [required]
   */
  entityId: string;
  /**
   * 实体类型
   * [required]
   */
  entity_type: 'article' | 'question';
};
export type DeleteFavorResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteFavorReq = {
  /**
   * [required]
   */
  entity_id: string;
  /**
   * [required]
   */
  entity_type: 'article' | 'question';
};
export type EntityPreviewValue = {
  /**
   * [required]
   */
  entity_id: string;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  entity_type: string;
  /**
   * [required]
   */
  cover_image: string;
  /**
   * UserInfo
   * ---
   * [required]
   */
  user_info: UserInfo;
};
export type Favor = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  create_user: string;
  /**
   * [required]
   */
  favor_fold_id: string;
  /**
   * [required]
   */
  entity_id: string;
  /**
   * EntityPreviewValue
   * ---
   * [required]
   */
  entity_value: EntityPreviewValue;
  /**
   * [required]
   */
  entity_type: string;
  /**
   * [required]
   */
  createdAt: number;
};
export type FavorList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: Favor[];
};
export type GetFavorListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * FavorList
   * ---
   * [required]
   */
  data: FavorList;
};
export type CreateFavorFoldResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 收藏夹详情
   * [required]
   */
  data: boolean;
};
export type CreateFavorFoldReq = {
  /**
   * 收藏夹名称
   * [required]
   */
  name: string;
  /**
   * 描述
   * [required]
   */
  description: string;
  /**
   * 是否公开
   * [required]
   */
  isPublic: boolean;
};
export type FavorFold = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  description: string;
  /**
   * [required]
   */
  is_public: boolean;
  /**
   * [required]
   */
  create_user: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type FavorFoldList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: FavorFold[];
};
export type GetFavorFoldListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * FavorFoldList
   * ---
   * [required]
   */
  data: FavorFoldList;
};
export type DeleteFavorFoldResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteFavorFoldReq = object;
export type UpdateFavorFoldResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 收藏夹详情
   * [required]
   */
  data: boolean;
};
export type UpdateFavorFoldReq = {
  /**
   * 收藏夹名称
   */
  name?: string;
  /**
   * 描述
   */
  description?: string;
  /**
   * 是否公开
   */
  isPublic?: boolean;
};
export type FollowList = {
  /**
   * 总数
   * [required]
   */
  total: number;
  /**
   * 关注列表
   * [required]
   */
  list: UserInfo[];
};
export type GetFansListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * FollowList
   * ---
   * [required]
   */
  data: FollowList;
};
export type FollowUserResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否关注成功
   * [required]
   */
  data: boolean;
};
export type FollowUserReq = {
  /**
   * 被关注用户ID
   * [required]
   */
  follow_id: string;
};
export type GetFollowListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * FollowList
   * ---
   * [required]
   */
  data: FollowList;
};
export type UnfollowUserResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否取消成功
   * [required]
   */
  data: boolean;
};
export type UnfollowUserReq = {
  /**
   * 被关注用户ID
   * [required]
   */
  follow_id: string;
};
export type DeleteResponse = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 删除是否成功
   * [required]
   */
  success: boolean;
};
export type DeleteRequest = {
  /**
   * 图片ID
   * [required]
   */
  image_id: string;
};
export type GetResponse = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * ImageInfo
   * ---
   * [required]
   */
  data: ImageInfo;
};
export type ImageInfoList = {
  /**
   * 图片列表
   * [required]
   */
  images: ImageInfo[];
  /**
   * 总数量
   * [required]
   */
  total: number;
};
export type ListByUserResponse = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * ImageInfoList
   * ---
   * [required]
   */
  data: ImageInfoList;
};
export type UploadResponse = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * ImageInfo
   * ---
   * [required]
   */
  data: ImageInfo;
};
export type DeleteMessageResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteMessage = object;
export type Message = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  senderID: string;
  /**
   * [required]
   */
  receiverID: string;
  /**
   * [required]
   */
  type: number;
  /**
   * [required]
   */
  entityID: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  isRead: boolean;
  /**
   * UserInfo
   * ---
   * [required]
   */
  senderInfo: UserInfo;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type MessageList = {
  /**
   * [required]
   */
  list: Message[];
  /**
   * [required]
   */
  total: number;
};
export type GetMessageListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * MessageList
   * ---
   * [required]
   */
  data: MessageList;
};
export type UnreadMessage = {
  /**
   * [required]
   */
  total: number;
};
export type GetUnreadMessageResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * UnreadMessage
   * ---
   * [required]
   */
  data: UnreadMessage;
};
export type CreateQuestionBankCategoryResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type CreateQuestionBankCategoryReq = {
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  description: string;
};
export type QuestionBankCategory = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  description: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type QuestionBankCategoryList = {
  /**
   * [required]
   */
  list: QuestionBankCategory[];
};
export type GetQuestionBankCategoryListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * QuestionBankCategoryList
   * ---
   * [required]
   */
  data: QuestionBankCategoryList;
};
export type DeleteQuestionBankCategoryResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteQuestionBankCategoryReq = object;
export type CreateQuestionBankResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 题库详情
   * [required]
   */
  data: boolean;
};
export type CreateQuestionBankReq = {
  /**
   * [required]
   */
  categoryId: string;
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  description: string;
  /**
   * [required]
   */
  difficulty: 'default' | 'easy' | 'medium' | 'hard';
  /**
   * [required]
   */
  tags: string[];
  /**
   * 封面图片 URL
   * [required]
   */
  coverImage: string;
};
export type GetQuestionBankResqonse = {
  id?: string;
  name?: string;
  description?: string;
  difficulty?: string;
  tags?: string[];
  /**
   * ImageInfo
   * ---
   */
  coverImage?: ImageInfo;
  /**
   * UserInfo
   * ---
   */
  createUser?: UserInfo;
  createdAt?: number;
  updatedAt?: number;
  /**
   * 是否收藏
   * [required]
   */
  isFavorited: boolean;
};
export type GetQuestionBankDetailResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * GetQuestionBankResqonse
   * ---
   * [required]
   */
  data: GetQuestionBankResqonse;
};
export type DeleteQuestionBankResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否删除成功
   * [required]
   */
  data: boolean;
};
export type DeleteQuestionBankReq = object;
export type QuestionBank = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  description: string;
  /**
   * [required]
   */
  difficulty: string;
  /**
   * [required]
   */
  tags: string[];
  /**
   * ImageInfo
   * ---
   * [required]
   */
  coverImage: ImageInfo;
  /**
   * UserInfo
   * ---
   * [required]
   */
  createUser: UserInfo;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type QuestionBankList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: QuestionBank[];
};
export type GetQuestionBankListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * QuestionBankList
   * ---
   * [required]
   */
  data: QuestionBankList;
};
export type CreateQuestionResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 题目详情
   * [required]
   */
  data: boolean;
};
export type CreateQuestionReq = {
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  bankId: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  difficulty: 'default' | 'easy' | 'medium' | 'hard';
};
export type Question = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  bankId: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  difficult: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type GetQuestionBankResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * Question
   * ---
   * [required]
   */
  data: Question;
};
export type DeleteQuestionResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否删除成功
   * [required]
   */
  data: boolean;
};
export type DeleteQuestionReq = object;
export type QuestionMenus = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  difficult: string;
};
export type QuestionList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: QuestionMenus[];
};
export type GetQuestionListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * QuestionList
   * ---
   * [required]
   */
  data: QuestionList;
};
export type CreateSchoolExpResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type CreateSchoolExpReq = {
  /**
   * [required]
   */
  education: string;
  /**
   * [required]
   */
  school: string;
  /**
   * [required]
   */
  major: string;
  /**
   * [required]
   */
  workExp: string;
  /**
   * [required]
   */
  content: string;
};
export type SchoolExp = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  education: string;
  /**
   * [required]
   */
  school: string;
  /**
   * [required]
   */
  major: string;
  /**
   * [required]
   */
  workExp: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
  /**
   * [required]
   */
  userId: string;
};
export type SchoolExpList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: SchoolExp[];
};
export type GetSchoolExpListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * SchoolExpList
   * ---
   * [required]
   */
  data: SchoolExpList;
};
export type DeleteSchoolExpResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteSchoolExpReq = object;
export type CreateTagResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type CreateTagReq = {
  /**
   * 标签名称
   * [required]
   */
  name: string;
  /**
   * 标签描述
   * [required]
   */
  description: string;
  /**
   * 是否为系统标签
   * [required]
   */
  is_system_provider: boolean;
  /**
   * 标签图标
   * [required]
   */
  icon: string;
};
export type Tag = {
  /**
   * 标签 ID
   * [required]
   */
  id: string;
  /**
   * 标签名称
   * [required]
   */
  name: string;
  /**
   * 标签描述
   * [required]
   */
  description: string;
  /**
   * 是否为系统标签
   * [required]
   */
  is_system_provider: boolean;
  /**
   * 标签图标
   * [required]
   */
  icon: string;
  /**
   * 标签使用次数
   * [required]
   */
  usage_count: number;
  /**
   * 创建时间
   * [required]
   */
  createdAt: number;
  /**
   * 更新时间
   * [required]
   */
  updatedAt: number;
};
export type TagList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: Tag[];
};
export type GetTagListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * TagList
   * ---
   * [required]
   */
  data: TagList;
};
export type DeleteTagResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteTagReq = object;
export type UpdatePasswordResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否修改成功
   * [required]
   */
  data: boolean;
};
export type UpdatePasswordReq = {
  /**
   * 旧密码
   * [required]
   */
  old_password: string;
  /**
   * 新密码
   * [required]
   */
  new_password: string;
};
export type DeleteUserResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否删除成功
   * [required]
   */
  data: boolean;
};
export type DeleteUserReq = object;
export type GetUserInfoResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * UserInfo
   * ---
   * [required]
   */
  data: UserInfo;
};
export type UserList = {
  /**
   * 总数
   * [required]
   */
  total: number;
  /**
   * 用户列表
   * [required]
   */
  list: UserInfo[];
};
export type GetUserListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * UserList
   * ---
   * [required]
   */
  data: UserList;
};
export type LoginResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * JWT token
   * [required]
   */
  data: string;
};
export type LoginReq = {
  /**
   * 用户名
   * [required]
   */
  username: string;
  /**
   * 密码
   * [required]
   */
  password: string;
};
export type RegisterResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否注册成功
   * [required]
   */
  data: boolean;
};
export type RegisterReq = {
  /**
   * 用户名
   * [required]
   */
  username: string;
  /**
   * 密码
   * [required]
   */
  password: string;
};
export type ResetPasswordByLinkResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否重置成功
   * [required]
   */
  data: boolean;
};
export type ResetPasswordByLinkReq = {
  /**
   * [required]
   */
  email: string;
  /**
   * [required]
   */
  password: string;
  /**
   * [required]
   */
  confirmPassword: string;
  /**
   * [required]
   */
  token: string;
};
export type SendResetPasswordLinkResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否发送成功
   * [required]
   */
  data: boolean;
};
export type SendResetPasswordLinkReq = {
  /**
   * 邮箱
   * [required]
   */
  email: string;
};
export type UpdateUserInfoResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否更新成功
   * [required]
   */
  data: boolean;
};
export type UpdateUserInfoReq = {
  /**
   * 昵称
   */
  nickname?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 性别 0:未知 1:男 2:女
   */
  gender?: '0' | '1';
  /**
   * 年龄
   */
  age?: number;
};
export type UpdateUserAvatarResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * 是否更新成功
   * [required]
   */
  data: boolean;
};
export type UpdateUserAvatarReq = {
  /**
   * 头像
   * [required]
   */
  avatar: string;
};
export type CreateWorkExpResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type CreateWorkExpReq = {
  /**
   * [required]
   */
  workExp: string;
  /**
   * [required]
   */
  company: string;
  /**
   * [required]
   */
  position: string;
  /**
   * [required]
   */
  region: string;
  /**
   * [required]
   */
  content: string;
};
export type WorkExp = {
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  workExp: string;
  /**
   * [required]
   */
  company: string;
  /**
   * [required]
   */
  region: string;
  /**
   * [required]
   */
  position: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  userID: string;
  /**
   * [required]
   */
  createdAt: number;
  /**
   * [required]
   */
  updatedAt: number;
};
export type WorkExpList = {
  /**
   * [required]
   */
  total: number;
  /**
   * [required]
   */
  list: WorkExp[];
};
export type GetWorkExpListResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * WorkExpList
   * ---
   * [required]
   */
  data: WorkExpList;
};
export type DeleteWorkExpResp = {
  /**
   * 状态码
   */
  code?: number;
  /**
   * 提示信息
   */
  message?: string;
  /**
   * [required]
   */
  data: boolean;
};
export type DeleteWorkExpReq = object;
declare global {
  interface Apis {
    academic_auth: {
      /**
       * ---
       *
       * [POST] 新增学术导航
       *
       * **path:** /api/academic_navigator/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 学历
       *   // [required]
       *   education: string
       *   // 内容
       *   // [required]
       *   content: string
       *   // 专业
       *   // [required]
       *   major: string
       *   // 学校
       *   // [required]
       *   school: string
       *   // 工作经验
       *   // [required]
       *   work_exp: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否添加成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      AddAcademicNavigator<
        Config extends Alova2MethodConfig<AddAcademicNavigatorResp> & {
          data: AddAcademicNavigatorReq;
        }
      >(
        config: Config
      ): Alova2Method<AddAcademicNavigatorResp, 'academic_auth.AddAcademicNavigator', Config>;
      /**
       * ---
       *
       * [DELETE] 删除学术导航
       *
       * **path:** /api/academic_navigator/delete/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否删除成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteAcademicNavigator<
        Config extends Alova2MethodConfig<DeleteAcademicNavigatorResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteAcademicNavigatorReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteAcademicNavigatorResp, 'academic_auth.DeleteAcademicNavigator', Config>;
      /**
       * ---
       *
       * [DELETE] 取消点赞学术导航
       *
       * **path:** /api/academic_navigator/dislike/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否取消点赞成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CancelLikeAcademicNavigator<
        Config extends Alova2MethodConfig<CancelLikeAcademicNavigatorResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: CancelLikeAcademicNavigatorReq;
        }
      >(
        config: Config
      ): Alova2Method<CancelLikeAcademicNavigatorResp, 'academic_auth.CancelLikeAcademicNavigator', Config>;
      /**
       * ---
       *
       * [POST] 点赞学术导航
       *
       * **path:** /api/academic_navigator/like/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否点赞成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      PostAcademicNavigatorLike<
        Config extends Alova2MethodConfig<PostAcademicNavigatorLikeResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: PostAcademicNavigatorLikeReq;
        }
      >(
        config: Config
      ): Alova2Method<PostAcademicNavigatorLikeResp, 'academic_auth.PostAcademicNavigatorLike', Config>;
    };
    academic_public: {
      /**
       * ---
       *
       * [GET] 获取学术导航
       *
       * **path:** /api/academic_navigator/get
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户 ID
       *   user_id?: string
       *   // 学历
       *   education?: string
       *   // 内容
       *   content?: string
       *   // 专业
       *   major?: string
       *   // 学校
       *   school?: string
       *   // 工作经验
       *   work_exp?: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页大小
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] AcademicList
       *   // [required]
       *   data: {
       *     // 总数
       *     // [required]
       *     total: number
       *     // 学术导航列表
       *     // [required]
       *     list: Array<{
       *       // 学术导航 ID
       *       // [required]
       *       id: string
       *       // 用户 ID
       *       // [required]
       *       user_id: string
       *       // 学历
       *       // [required]
       *       education: string
       *       // 内容
       *       // [required]
       *       content: string
       *       // 专业
       *       // [required]
       *       major: string
       *       // 学校
       *       // [required]
       *       school: string
       *       // 工作经验
       *       // [required]
       *       work_exp: string
       *       // 点赞数
       *       // [required]
       *       like_count: number
       *     }>
       *   }
       * }
       * ```
       */
      GetAcademicNavigator<
        Config extends Alova2MethodConfig<GetAcademicNavigatorResp> & {
          params: {
            /**
             * 用户 ID
             */
            user_id?: string;
            /**
             * 学历
             */
            education?: string;
            /**
             * 内容
             */
            content?: string;
            /**
             * 专业
             */
            major?: string;
            /**
             * 学校
             */
            school?: string;
            /**
             * 工作经验
             */
            work_exp?: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页大小
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetAcademicNavigatorResp, 'academic_public.GetAcademicNavigator', Config>;
    };
    ai_auth: {
      /**
       * ---
       *
       * [POST] 与AI对话
       *
       * **path:** /api/ai/chat
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 内容
       *   // [required]
       *   content: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: string
       * }
       * ```
       */
      ChatWithAI<
        Config extends Alova2MethodConfig<ChatWithAIResp> & {
          data: ChatWithAIReq;
        }
      >(
        config: Config
      ): Alova2Method<ChatWithAIResp, 'ai_auth.ChatWithAI', Config>;
    };
    articles_auth: {
      /**
       * ---
       *
       * [POST] 创建文章
       *
       * **path:** /api/articles/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 内容类型
       *   // [required]
       *   type: 'article' | 'micro_post'
       *   // 标题
       *   title?: string
       *   // 内容
       *   // [required]
       *   content: string
       *   // 摘要
       *   summary?: string
       *   // 图片 URL 列表
       *   imageIds?: string[]
       *   // 封面图片 URL
       *   coverImageID?: string
       *   // 标签列表
       *   tags?: string[]
       *   // 文章状态
       *   // [required]
       *   status: 'draft' | 'published'
       *   // 分类 ID
       *   // [required]
       *   categoryId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 文章详情
       *   // [required]
       *   data: string
       * }
       * ```
       */
      CreateArticle<
        Config extends Alova2MethodConfig<CreateArticleResp> & {
          data: CreateArticleReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateArticleResp, 'articles_auth.CreateArticle', Config>;
      /**
       * ---
       *
       * [POST] 更新文章点赞数
       *
       * **path:** /api/articles/update_like_count
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 文章 ID
       *   // [required]
       *   id: string
       *   // 操作类型, true:点赞, false:取消点赞
       *   // [required]
       *   trigger: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否更新成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateLikeCount<
        Config extends Alova2MethodConfig<UpdateLikeCountResp> & {
          data: UpdateLikeCountReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateLikeCountResp, 'articles_auth.UpdateLikeCount', Config>;
      /**
       * ---
       *
       * [DELETE] 删除文章
       *
       * **path:** /api/articles/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否删除成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteArticle<
        Config extends Alova2MethodConfig<DeleteArticleResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteArticleReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteArticleResp, 'articles_auth.DeleteArticle', Config>;
      /**
       * ---
       *
       * [PUT] 更新文章
       *
       * **path:** /api/articles/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 标题
       *   title?: string
       *   // 内容
       *   content?: string
       *   // 摘要
       *   summary?: string
       *   // 图片 URL 列表
       *   imageIds?: string[]
       *   // 封面图片 URL
       *   coverImageID?: string
       *   // 标签列表
       *   tags?: string[]
       *   // 文章状态
       *   status?: string
       *   // 分类 ID
       *   // [required]
       *   categoryId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否更新成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateArticle<
        Config extends Alova2MethodConfig<UpdateArticleResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateArticleReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateArticleResp, 'articles_auth.UpdateArticle', Config>;
    };
    articles_public: {
      /**
       * ---
       *
       * [GET] 获取文章
       *
       * **path:** /api/articles/detail/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] GetArticle
       *   // [required]
       *   data: {
       *     // [title] Article
       *     // [required]
       *     article: {
       *       // 主键 ID
       *       // [required]
       *       id: string
       *       // 内容类型：长文或短文
       *       // [required]
       *       type: string
       *       // 标题
       *       // [required]
       *       title: string
       *       // 内容
       *       // [required]
       *       content: string
       *       // 摘要
       *       // [required]
       *       summary: string
       *       // 图片 URL 列表
       *       // [required]
       *       imageUrls: string[]
       *       // 封面图片 URL
       *       // [required]
       *       coverImage: string
       *       // 作者 ID
       *       // [required]
       *       authorId: string
       *       // 标签列表
       *       // [required]
       *       tags: string[]
       *       // 分类 ID
       *       // [required]
       *       categoryId: string
       *       // 阅读次数
       *       // [required]
       *       viewCount: number
       *       // 点赞次数
       *       // [required]
       *       likeCount: number
       *       // 是否已点赞
       *       // [required]
       *       isLiked: boolean
       *       // 是否已收藏
       *       // [required]
       *       isFavorited: boolean
       *       // 评论数
       *       // [required]
       *       commentCount: number
       *       // 文章状态
       *       // [required]
       *       status: string
       *       // 创建时间
       *       // [required]
       *       createdAt: number
       *       // 更新时间
       *       // [required]
       *       updatedAt: number
       *     }
       *     // [title] UserInfo
       *     // [required]
       *     author: {
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }
       *   }
       * }
       * ```
       */
      GetArticle<
        Config extends Alova2MethodConfig<GetArticleResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetArticleResp, 'articles_public.GetArticle', Config>;
      /**
       * ---
       *
       * [GET] 获取文章附加信息
       *
       * **path:** /api/articles/extra/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] ArticleExtra
       *   // [required]
       *   data: {
       *     // [required]
       *     id: string
       *     // [required]
       *     view_count: number
       *     // [required]
       *     like_count: number
       *     // [required]
       *     comment_count: number
       *     // [required]
       *     is_liked: boolean
       *     // [required]
       *     is_favorited: boolean
       *     // [required]
       *     favorite_count: number
       *   }
       * }
       * ```
       */
      GetArticleExtra<
        Config extends Alova2MethodConfig<GetArticleExtraResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetArticleExtraResp, 'articles_public.GetArticleExtra', Config>;
      /**
       * ---
       *
       * [GET] 获取文章列表
       *
       * **path:** /api/articles/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 内容类型
       *   // [required]
       *   type: 'article' | 'micro_post'
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       *   // 用户 ID
       *   user_id?: string
       *   // 分类 ID
       *   // [required]
       *   category_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 文章列表
       *   // [required]
       *   data: Array<{
       *     // [title] Article
       *     // [required]
       *     article: {
       *       // 主键 ID
       *       // [required]
       *       id: string
       *       // 内容类型：长文或短文
       *       // [required]
       *       type: string
       *       // 标题
       *       // [required]
       *       title: string
       *       // 内容
       *       // [required]
       *       content: string
       *       // 摘要
       *       // [required]
       *       summary: string
       *       // 图片 URL 列表
       *       // [required]
       *       imageUrls: string[]
       *       // 封面图片 URL
       *       // [required]
       *       coverImage: string
       *       // 作者 ID
       *       // [required]
       *       authorId: string
       *       // 标签列表
       *       // [required]
       *       tags: string[]
       *       // 分类 ID
       *       // [required]
       *       categoryId: string
       *       // 阅读次数
       *       // [required]
       *       viewCount: number
       *       // 点赞次数
       *       // [required]
       *       likeCount: number
       *       // 是否已点赞
       *       // [required]
       *       isLiked: boolean
       *       // 是否已收藏
       *       // [required]
       *       isFavorited: boolean
       *       // 评论数
       *       // [required]
       *       commentCount: number
       *       // 文章状态
       *       // [required]
       *       status: string
       *       // 创建时间
       *       // [required]
       *       createdAt: number
       *       // 更新时间
       *       // [required]
       *       updatedAt: number
       *     }
       *     // [title] UserInfo
       *     // [required]
       *     author: {
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }
       *   }>
       * }
       * ```
       */
      GetArticles<
        Config extends Alova2MethodConfig<GetArticlesResp> & {
          params: {
            /**
             * 内容类型
             * [required]
             */
            type: 'article' | 'micro_post';
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
            /**
             * 用户 ID
             */
            user_id?: string;
            /**
             * 分类 ID
             * [required]
             */
            category_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetArticlesResp, 'articles_public.GetArticles', Config>;
      /**
       * ---
       *
       * [GET] 获取某个用户的文章列表
       *
       * **path:** /api/articles/user/{user_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   user_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 内容类型
       *   // [required]
       *   type: 'article' | 'micro_post'
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       *   // 作者 ID
       *   // [required]
       *   author_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] GetArticleResponse
       *   // [required]
       *   data: {
       *     // [required]
       *     list: Array<{
       *       // [title] Article
       *       // [required]
       *       article: {
       *         // 主键 ID
       *         // [required]
       *         id: string
       *         // 内容类型：长文或短文
       *         // [required]
       *         type: string
       *         // 标题
       *         // [required]
       *         title: string
       *         // 内容
       *         // [required]
       *         content: string
       *         // 摘要
       *         // [required]
       *         summary: string
       *         // 图片 URL 列表
       *         // [required]
       *         imageUrls: string[]
       *         // 封面图片 URL
       *         // [required]
       *         coverImage: string
       *         // 作者 ID
       *         // [required]
       *         authorId: string
       *         // 标签列表
       *         // [required]
       *         tags: string[]
       *         // 分类 ID
       *         // [required]
       *         categoryId: string
       *         // 阅读次数
       *         // [required]
       *         viewCount: number
       *         // 点赞次数
       *         // [required]
       *         likeCount: number
       *         // 是否已点赞
       *         // [required]
       *         isLiked: boolean
       *         // 是否已收藏
       *         // [required]
       *         isFavorited: boolean
       *         // 评论数
       *         // [required]
       *         commentCount: number
       *         // 文章状态
       *         // [required]
       *         status: string
       *         // 创建时间
       *         // [required]
       *         createdAt: number
       *         // 更新时间
       *         // [required]
       *         updatedAt: number
       *       }
       *       // [title] UserInfo
       *       // [required]
       *       author: {
       *         // 用户ID
       *         // [required]
       *         id: string
       *         // 用户名
       *         // [required]
       *         username: string
       *         // 昵称
       *         // [required]
       *         nickname: string
       *         // 邮箱
       *         // [required]
       *         email: string
       *         // 手机号
       *         // [required]
       *         phone: string
       *         // 头像
       *         // [required]
       *         avatar: string
       *         // 性别 0:未知 1:男 2:女
       *         // [required]
       *         gender: '0' | '1'
       *         // 年龄
       *         // [required]
       *         age: number
       *         // 状态 true:正常 false:禁用
       *         // [required]
       *         status: boolean
       *         // 角色 0:普通用户 1:管理员
       *         // [required]
       *         is_admin: boolean
       *         // 创建时间
       *         // [required]
       *         create_at: number
       *         // 更新时间
       *         // [required]
       *         update_at: number
       *         // 关注数量
       *         // [required]
       *         follow_count: number
       *         // 粉丝数量
       *         // [required]
       *         fans_count: number
       *         // 是否已关注
       *         // [required]
       *         is_followed: boolean
       *         // 文章数量
       *         // [required]
       *         article_count: number
       *       }
       *     }>
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      GetArticlesByUser<
        Config extends Alova2MethodConfig<GetArticlesByUserResp> & {
          pathParams: {
            /**
             * [required]
             */
            user_id: string;
          };
          params: {
            /**
             * 内容类型
             * [required]
             */
            type: 'article' | 'micro_post';
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
            /**
             * 作者 ID
             * [required]
             */
            author_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetArticlesByUserResp, 'articles_public.GetArticlesByUser', Config>;
    };
    coderhub: {
      /**
       * ---
       *
       * [GET] 健康检查
       *
       * **path:** /api/coderhub/health
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否健康
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      AcademicHealth<Config extends Alova2MethodConfig<HealthResp>>(
        config?: Config
      ): Alova2Method<HealthResp, 'coderhub.AcademicHealth', Config>;
    };
    comments_auth: {
      /**
       * ---
       *
       * [GET] 获取评论列表
       *
       * **path:** /api/comments/article/{entity_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   entity_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] List
       *   // [required]
       *   data: {
       *     // 评论列表
       *     // [required]
       *     list: Array<{
       *       // 评论ID
       *       // [required]
       *       id: string
       *       // 文章ID
       *       // [required]
       *       entity_id: string
       *       // 评论内容
       *       // [required]
       *       content: string
       *       // 根评论ID
       *       // [required]
       *       root_id: string
       *       // 父评论ID
       *       // [required]
       *       parent_id: string
       *       // 实体作者ID
       *       // [required]
       *       entity_author_id: string
       *       // [title] UserInfo
       *       // [required]
       *       user_info: {
       *         // 用户ID
       *         // [required]
       *         id: string
       *         // 用户名
       *         // [required]
       *         username: string
       *         // 昵称
       *         // [required]
       *         nickname: string
       *         // 邮箱
       *         // [required]
       *         email: string
       *         // 手机号
       *         // [required]
       *         phone: string
       *         // 头像
       *         // [required]
       *         avatar: string
       *         // 性别 0:未知 1:男 2:女
       *         // [required]
       *         gender: '0' | '1'
       *         // 年龄
       *         // [required]
       *         age: number
       *         // 状态 true:正常 false:禁用
       *         // [required]
       *         status: boolean
       *         // 角色 0:普通用户 1:管理员
       *         // [required]
       *         is_admin: boolean
       *         // 创建时间
       *         // [required]
       *         create_at: number
       *         // 更新时间
       *         // [required]
       *         update_at: number
       *         // 关注数量
       *         // [required]
       *         follow_count: number
       *         // 粉丝数量
       *         // [required]
       *         fans_count: number
       *         // 是否已关注
       *         // [required]
       *         is_followed: boolean
       *         // 文章数量
       *         // [required]
       *         article_count: number
       *       }
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *       // 更新时间
       *       // [required]
       *       updated_at: number
       *       // 子评论列表
       *       // [required]
       *       replies: Array<Comment>
       *       // [title] UserInfo
       *       // [required]
       *       reply_to_user_info: UserInfo
       *       // 子评论数量
       *       // [required]
       *       replies_count: number
       *       // 点赞数
       *       // [required]
       *       like_count: number
       *       // 是否已点赞
       *       // [required]
       *       is_liked: boolean
       *       // 评论图片列表
       *       // [required]
       *       images: Array<{
       *         // 图片ID
       *         // [required]
       *         image_id: string
       *         // MinIO bucket名称
       *         // [required]
       *         bucket_name: string
       *         // MinIO中的对象名称
       *         // [required]
       *         object_name: string
       *         // 完整的访问URL
       *         // [required]
       *         url: string
       *         // 缩略图URL
       *         // [required]
       *         thumbnail_url: string
       *         // 文件MIME类型
       *         // [required]
       *         content_type: string
       *         // 文件大小(bytes)
       *         // [required]
       *         size: number
       *         // 图片宽度(px)
       *         // [required]
       *         width: number
       *         // 图片高度(px)
       *         // [required]
       *         height: number
       *         // 上传者IP
       *         // [required]
       *         upload_ip: string
       *         // 上传者ID
       *         // [required]
       *         user_id: string
       *         // 创建时间
       *         // [required]
       *         created_at: number
       *       }>
       *     }>
       *     // 总评论数
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      GetComments<
        Config extends Alova2MethodConfig<GetCommentsResp> & {
          pathParams: {
            /**
             * [required]
             */
            entity_id: string;
          };
          params: {
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetCommentsResp, 'comments_auth.GetComments', Config>;
      /**
       * ---
       *
       * [POST] 创建评论
       *
       * **path:** /api/comments/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 文章ID
       *   // [required]
       *   entity_id: string
       *   // 评论内容
       *   // [required]
       *   content: string
       *   // 根评论ID
       *   // [required]
       *   root_id: string
       *   // 父评论ID（可选）
       *   // [required]
       *   parent_id: string
       *   // 实体作者ID
       *   // [required]
       *   entity_author_id: string
       *   // 回复的目标评论ID（可选）
       *   // [required]
       *   reply_to_uid: string
       *   // 图片ID列表
       *   // [required]
       *   image_ids: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] Comment
       *   // [required]
       *   data: {
       *     // 评论ID
       *     // [required]
       *     id: string
       *     // 文章ID
       *     // [required]
       *     entity_id: string
       *     // 评论内容
       *     // [required]
       *     content: string
       *     // 根评论ID
       *     // [required]
       *     root_id: string
       *     // 父评论ID
       *     // [required]
       *     parent_id: string
       *     // 实体作者ID
       *     // [required]
       *     entity_author_id: string
       *     // [title] UserInfo
       *     // [required]
       *     user_info: {
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }
       *     // 创建时间
       *     // [required]
       *     created_at: number
       *     // 更新时间
       *     // [required]
       *     updated_at: number
       *     // 子评论列表
       *     // [required]
       *     replies: Array<Comment>
       *     // [title] UserInfo
       *     // [required]
       *     reply_to_user_info: UserInfo
       *     // 子评论数量
       *     // [required]
       *     replies_count: number
       *     // 点赞数
       *     // [required]
       *     like_count: number
       *     // 是否已点赞
       *     // [required]
       *     is_liked: boolean
       *     // 评论图片列表
       *     // [required]
       *     images: Array<{
       *       // 图片ID
       *       // [required]
       *       image_id: string
       *       // MinIO bucket名称
       *       // [required]
       *       bucket_name: string
       *       // MinIO中的对象名称
       *       // [required]
       *       object_name: string
       *       // 完整的访问URL
       *       // [required]
       *       url: string
       *       // 缩略图URL
       *       // [required]
       *       thumbnail_url: string
       *       // 文件MIME类型
       *       // [required]
       *       content_type: string
       *       // 文件大小(bytes)
       *       // [required]
       *       size: number
       *       // 图片宽度(px)
       *       // [required]
       *       width: number
       *       // 图片高度(px)
       *       // [required]
       *       height: number
       *       // 上传者IP
       *       // [required]
       *       upload_ip: string
       *       // 上传者ID
       *       // [required]
       *       user_id: string
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *     }>
       *   }
       * }
       * ```
       */
      CreateComment<
        Config extends Alova2MethodConfig<CreateCommentResp> & {
          data: CreateCommentReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateCommentResp, 'comments_auth.CreateComment', Config>;
      /**
       * ---
       *
       * [GET] 获取某条评论的子评论列表
       *
       * **path:** /api/comments/replies/{comment_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   comment_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] List
       *   // [required]
       *   data: {
       *     // 评论列表
       *     // [required]
       *     list: Array<{
       *       // 评论ID
       *       // [required]
       *       id: string
       *       // 文章ID
       *       // [required]
       *       entity_id: string
       *       // 评论内容
       *       // [required]
       *       content: string
       *       // 根评论ID
       *       // [required]
       *       root_id: string
       *       // 父评论ID
       *       // [required]
       *       parent_id: string
       *       // 实体作者ID
       *       // [required]
       *       entity_author_id: string
       *       // [title] UserInfo
       *       // [required]
       *       user_info: {
       *         // 用户ID
       *         // [required]
       *         id: string
       *         // 用户名
       *         // [required]
       *         username: string
       *         // 昵称
       *         // [required]
       *         nickname: string
       *         // 邮箱
       *         // [required]
       *         email: string
       *         // 手机号
       *         // [required]
       *         phone: string
       *         // 头像
       *         // [required]
       *         avatar: string
       *         // 性别 0:未知 1:男 2:女
       *         // [required]
       *         gender: '0' | '1'
       *         // 年龄
       *         // [required]
       *         age: number
       *         // 状态 true:正常 false:禁用
       *         // [required]
       *         status: boolean
       *         // 角色 0:普通用户 1:管理员
       *         // [required]
       *         is_admin: boolean
       *         // 创建时间
       *         // [required]
       *         create_at: number
       *         // 更新时间
       *         // [required]
       *         update_at: number
       *         // 关注数量
       *         // [required]
       *         follow_count: number
       *         // 粉丝数量
       *         // [required]
       *         fans_count: number
       *         // 是否已关注
       *         // [required]
       *         is_followed: boolean
       *         // 文章数量
       *         // [required]
       *         article_count: number
       *       }
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *       // 更新时间
       *       // [required]
       *       updated_at: number
       *       // 子评论列表
       *       // [required]
       *       replies: Array<Comment>
       *       // [title] UserInfo
       *       // [required]
       *       reply_to_user_info: UserInfo
       *       // 子评论数量
       *       // [required]
       *       replies_count: number
       *       // 点赞数
       *       // [required]
       *       like_count: number
       *       // 是否已点赞
       *       // [required]
       *       is_liked: boolean
       *       // 评论图片列表
       *       // [required]
       *       images: Array<{
       *         // 图片ID
       *         // [required]
       *         image_id: string
       *         // MinIO bucket名称
       *         // [required]
       *         bucket_name: string
       *         // MinIO中的对象名称
       *         // [required]
       *         object_name: string
       *         // 完整的访问URL
       *         // [required]
       *         url: string
       *         // 缩略图URL
       *         // [required]
       *         thumbnail_url: string
       *         // 文件MIME类型
       *         // [required]
       *         content_type: string
       *         // 文件大小(bytes)
       *         // [required]
       *         size: number
       *         // 图片宽度(px)
       *         // [required]
       *         width: number
       *         // 图片高度(px)
       *         // [required]
       *         height: number
       *         // 上传者IP
       *         // [required]
       *         upload_ip: string
       *         // 上传者ID
       *         // [required]
       *         user_id: string
       *         // 创建时间
       *         // [required]
       *         created_at: number
       *       }>
       *     }>
       *     // 总评论数
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      GetCommentReplies<
        Config extends Alova2MethodConfig<GetCommentRepliesResp> & {
          pathParams: {
            /**
             * [required]
             */
            comment_id: string;
          };
          params: {
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetCommentRepliesResp, 'comments_auth.GetCommentReplies', Config>;
      /**
       * ---
       *
       * [POST] 更新评论点赞数
       *
       * **path:** /api/comments/update_like_count
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 评论ID
       *   // [required]
       *   comment_id: string
       *   // 操作类型, true:点赞, false:取消点赞
       *   // [required]
       *   trigger: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 更新是否成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateCommentLikeCount<
        Config extends Alova2MethodConfig<UpdateCommentLikeCountResp> & {
          data: UpdateCommentLikeCountReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateCommentLikeCountResp, 'comments_auth.UpdateCommentLikeCount', Config>;
      /**
       * ---
       *
       * [GET] 获取单个评论
       *
       * **path:** /api/comments/{comment_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   comment_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] Comment
       *   // [required]
       *   data: {
       *     // 评论ID
       *     // [required]
       *     id: string
       *     // 文章ID
       *     // [required]
       *     entity_id: string
       *     // 评论内容
       *     // [required]
       *     content: string
       *     // 根评论ID
       *     // [required]
       *     root_id: string
       *     // 父评论ID
       *     // [required]
       *     parent_id: string
       *     // 实体作者ID
       *     // [required]
       *     entity_author_id: string
       *     // [title] UserInfo
       *     // [required]
       *     user_info: {
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }
       *     // 创建时间
       *     // [required]
       *     created_at: number
       *     // 更新时间
       *     // [required]
       *     updated_at: number
       *     // 子评论列表
       *     // [required]
       *     replies: Array<Comment>
       *     // [title] UserInfo
       *     // [required]
       *     reply_to_user_info: UserInfo
       *     // 子评论数量
       *     // [required]
       *     replies_count: number
       *     // 点赞数
       *     // [required]
       *     like_count: number
       *     // 是否已点赞
       *     // [required]
       *     is_liked: boolean
       *     // 评论图片列表
       *     // [required]
       *     images: Array<{
       *       // 图片ID
       *       // [required]
       *       image_id: string
       *       // MinIO bucket名称
       *       // [required]
       *       bucket_name: string
       *       // MinIO中的对象名称
       *       // [required]
       *       object_name: string
       *       // 完整的访问URL
       *       // [required]
       *       url: string
       *       // 缩略图URL
       *       // [required]
       *       thumbnail_url: string
       *       // 文件MIME类型
       *       // [required]
       *       content_type: string
       *       // 文件大小(bytes)
       *       // [required]
       *       size: number
       *       // 图片宽度(px)
       *       // [required]
       *       width: number
       *       // 图片高度(px)
       *       // [required]
       *       height: number
       *       // 上传者IP
       *       // [required]
       *       upload_ip: string
       *       // 上传者ID
       *       // [required]
       *       user_id: string
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *     }>
       *   }
       * }
       * ```
       */
      GetComment<
        Config extends Alova2MethodConfig<GetCommentResp> & {
          pathParams: {
            /**
             * [required]
             */
            comment_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetCommentResp, 'comments_auth.GetComment', Config>;
      /**
       * ---
       *
       * [DELETE] 删除评论
       *
       * **path:** /api/comments/{comment_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   comment_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 删除是否成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteComment<
        Config extends Alova2MethodConfig<DeleteCommentResp> & {
          pathParams: {
            /**
             * [required]
             */
            comment_id: string;
          };
          data: DeleteCommentReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteCommentResp, 'comments_auth.DeleteComment', Config>;
    };
    emotion_auth: {
      /**
       * ---
       *
       * [POST] 创建表情包
       *
       * **path:** /api/emotion/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 表情包名称
       *   // [required]
       *   code: string
       *   // 描述
       *   // [required]
       *   description: string
       *   // 图片地址
       *   // [required]
       *   url: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 表情包详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateEmotion<
        Config extends Alova2MethodConfig<CreateEmojiResp> & {
          data: CreateEmojiReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateEmojiResp, 'emotion_auth.CreateEmotion', Config>;
      /**
       * ---
       *
       * [DELETE] 删除表情包
       *
       * **path:** /api/emotion/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteEmotion<
        Config extends Alova2MethodConfig<DeleteEmojiResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteEmojiReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteEmojiResp, 'emotion_auth.DeleteEmotion', Config>;
    };
    emotion_public: {
      /**
       * ---
       *
       * [GET] 获取表情包列表
       *
       * **path:** /api/emotion/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] EmojiList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       code: string
       *       // [required]
       *       description: string
       *       // [required]
       *       url: string
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListEmotion<
        Config extends Alova2MethodConfig<GetEmojiListResp> & {
          params: {
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetEmojiListResp, 'emotion_public.ListEmotion', Config>;
    };
    favorites_auth: {
      /**
       * ---
       *
       * [POST] 添加收藏内容
       *
       * **path:** /api/favorites/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 收藏夹 ID
       *   // [required]
       *   foldId: string
       *   // 实体 ID
       *   // [required]
       *   entityId: string
       *   // 实体类型
       *   // [required]
       *   entity_type: 'article' | 'question'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 收藏夹详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      AddFavoriteContent<
        Config extends Alova2MethodConfig<CreateFavorResp> & {
          data: CreateFavorReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateFavorResp, 'favorites_auth.AddFavoriteContent', Config>;
      /**
       * ---
       *
       * [DELETE] 删除收藏夹内容
       *
       * **path:** /api/favorites/content
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   entity_id: string
       *   // [required]
       *   entity_type: 'article' | 'question'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteFavoriteContent<
        Config extends Alova2MethodConfig<DeleteFavorResp> & {
          data: DeleteFavorReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteFavorResp, 'favorites_auth.DeleteFavoriteContent', Config>;
      /**
       * ---
       *
       * [POST] 创建收藏夹
       *
       * **path:** /api/favorites/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 收藏夹名称
       *   // [required]
       *   name: string
       *   // 描述
       *   // [required]
       *   description: string
       *   // 是否公开
       *   // [required]
       *   isPublic: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 收藏夹详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateFavorite<
        Config extends Alova2MethodConfig<CreateFavorFoldResp> & {
          data: CreateFavorFoldReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateFavorFoldResp, 'favorites_auth.CreateFavorite', Config>;
      /**
       * ---
       *
       * [DELETE] 删除收藏夹
       *
       * **path:** /api/favorites/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteFavorite<
        Config extends Alova2MethodConfig<DeleteFavorFoldResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteFavorFoldReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteFavorFoldResp, 'favorites_auth.DeleteFavorite', Config>;
      /**
       * ---
       *
       * [PUT] 更新收藏夹
       *
       * **path:** /api/favorites/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 收藏夹名称
       *   name?: string
       *   // 描述
       *   description?: string
       *   // 是否公开
       *   isPublic?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 收藏夹详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateFavorite<
        Config extends Alova2MethodConfig<UpdateFavorFoldResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateFavorFoldReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateFavorFoldResp, 'favorites_auth.UpdateFavorite', Config>;
    };
    favorites_public: {
      /**
       * ---
       *
       * [GET] 获取收藏内容列表
       *
       * **path:** /api/favorites/content_list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户 ID
       *   // [required]
       *   userId: string
       *   // 实体类型
       *   // [required]
       *   entity_type: 'article' | 'question'
       *   // 收藏夹 ID
       *   // [required]
       *   favor_fold_id: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] FavorList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       create_user: string
       *       // [required]
       *       favor_fold_id: string
       *       // [required]
       *       entity_id: string
       *       // [title] EntityPreviewValue
       *       // [required]
       *       entity_value: {
       *         // [required]
       *         entity_id: string
       *         // [required]
       *         title: string
       *         // [required]
       *         content: string
       *         // [required]
       *         entity_type: string
       *         // [required]
       *         cover_image: string
       *         // [title] UserInfo
       *         // [required]
       *         user_info: {
       *           // 用户ID
       *           // [required]
       *           id: string
       *           // 用户名
       *           // [required]
       *           username: string
       *           // 昵称
       *           // [required]
       *           nickname: string
       *           // 邮箱
       *           // [required]
       *           email: string
       *           // 手机号
       *           // [required]
       *           phone: string
       *           // 头像
       *           // [required]
       *           avatar: string
       *           // 性别 0:未知 1:男 2:女
       *           // [required]
       *           gender: '0' | '1'
       *           // 年龄
       *           // [required]
       *           age: number
       *           // 状态 true:正常 false:禁用
       *           // [required]
       *           status: boolean
       *           // 角色 0:普通用户 1:管理员
       *           // [required]
       *           is_admin: boolean
       *           // 创建时间
       *           // [required]
       *           create_at: number
       *           // 更新时间
       *           // [required]
       *           update_at: number
       *           // 关注数量
       *           // [required]
       *           follow_count: number
       *           // 粉丝数量
       *           // [required]
       *           fans_count: number
       *           // 是否已关注
       *           // [required]
       *           is_followed: boolean
       *           // 文章数量
       *           // [required]
       *           article_count: number
       *         }
       *       }
       *       // [required]
       *       entity_type: string
       *       // [required]
       *       createdAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListFavoriteContent<
        Config extends Alova2MethodConfig<GetFavorListResp> & {
          params: {
            /**
             * 用户 ID
             * [required]
             */
            userId: string;
            /**
             * 实体类型
             * [required]
             */
            entity_type: 'article' | 'question';
            /**
             * 收藏夹 ID
             * [required]
             */
            favor_fold_id: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetFavorListResp, 'favorites_public.ListFavoriteContent', Config>;
      /**
       * ---
       *
       * [GET] 获取收藏夹列表
       *
       * **path:** /api/favorites/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户 ID
       *   // [required]
       *   user_id: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] FavorFoldList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       name: string
       *       // [required]
       *       description: string
       *       // [required]
       *       is_public: boolean
       *       // [required]
       *       create_user: string
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListFavorite<
        Config extends Alova2MethodConfig<GetFavorFoldListResp> & {
          params: {
            /**
             * 用户 ID
             * [required]
             */
            user_id: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetFavorFoldListResp, 'favorites_public.ListFavorite', Config>;
    };
    follow_public: {
      /**
       * ---
       *
       * [GET] 获取粉丝列表
       *
       * **path:** /api/follow/fans
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户ID
       *   // [required]
       *   user_id: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] FollowList
       *   // [required]
       *   data: {
       *     // 总数
       *     // [required]
       *     total: number
       *     // 关注列表
       *     // [required]
       *     list: Array<{
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }>
       *   }
       * }
       * ```
       */
      GetFansList<
        Config extends Alova2MethodConfig<GetFansListResp> & {
          params: {
            /**
             * 用户ID
             * [required]
             */
            user_id: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetFansListResp, 'follow_public.GetFansList', Config>;
      /**
       * ---
       *
       * [GET] 获取关注列表
       *
       * **path:** /api/follow/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户ID
       *   // [required]
       *   user_id: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] FollowList
       *   // [required]
       *   data: {
       *     // 总数
       *     // [required]
       *     total: number
       *     // 关注列表
       *     // [required]
       *     list: Array<{
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }>
       *   }
       * }
       * ```
       */
      GetFollowList<
        Config extends Alova2MethodConfig<GetFollowListResp> & {
          params: {
            /**
             * 用户ID
             * [required]
             */
            user_id: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetFollowListResp, 'follow_public.GetFollowList', Config>;
    };
    follow_auth: {
      /**
       * ---
       *
       * [POST] 关注用户
       *
       * **path:** /api/follow/follow
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 被关注用户ID
       *   // [required]
       *   follow_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否关注成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      FollowUser<
        Config extends Alova2MethodConfig<FollowUserResp> & {
          data: FollowUserReq;
        }
      >(
        config: Config
      ): Alova2Method<FollowUserResp, 'follow_auth.FollowUser', Config>;
      /**
       * ---
       *
       * [POST] 取消关注
       *
       * **path:** /api/follow/unfollow
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 被关注用户ID
       *   // [required]
       *   follow_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否取消成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UnfollowUser<
        Config extends Alova2MethodConfig<UnfollowUserResp> & {
          data: UnfollowUserReq;
        }
      >(
        config: Config
      ): Alova2Method<UnfollowUserResp, 'follow_auth.UnfollowUser', Config>;
    };
    image_auth: {
      /**
       * ---
       *
       * [POST] 删除图片
       *
       * **path:** /api/image/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 图片ID
       *   // [required]
       *   image_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 删除是否成功
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      Delete<
        Config extends Alova2MethodConfig<DeleteResponse> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<DeleteResponse, 'image_auth.Delete', Config>;
      /**
       * ---
       *
       * [GET] 获取图片信息
       *
       * **path:** /api/image/get/{image_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   image_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] ImageInfo
       *   // [required]
       *   data: {
       *     // 图片ID
       *     // [required]
       *     image_id: string
       *     // MinIO bucket名称
       *     // [required]
       *     bucket_name: string
       *     // MinIO中的对象名称
       *     // [required]
       *     object_name: string
       *     // 完整的访问URL
       *     // [required]
       *     url: string
       *     // 缩略图URL
       *     // [required]
       *     thumbnail_url: string
       *     // 文件MIME类型
       *     // [required]
       *     content_type: string
       *     // 文件大小(bytes)
       *     // [required]
       *     size: number
       *     // 图片宽度(px)
       *     // [required]
       *     width: number
       *     // 图片高度(px)
       *     // [required]
       *     height: number
       *     // 上传者IP
       *     // [required]
       *     upload_ip: string
       *     // 上传者ID
       *     // [required]
       *     user_id: string
       *     // 创建时间
       *     // [required]
       *     created_at: number
       *   }
       * }
       * ```
       */
      Get<
        Config extends Alova2MethodConfig<GetResponse> & {
          pathParams: {
            /**
             * [required]
             */
            image_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetResponse, 'image_auth.Get', Config>;
      /**
       * ---
       *
       * [GET] 获取用户图片列表
       *
       * **path:** /api/image/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 用户ID
       *   // [required]
       *   user_id: string
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] ImageInfoList
       *   // [required]
       *   data: {
       *     // 图片列表
       *     // [required]
       *     images: Array<{
       *       // 图片ID
       *       // [required]
       *       image_id: string
       *       // MinIO bucket名称
       *       // [required]
       *       bucket_name: string
       *       // MinIO中的对象名称
       *       // [required]
       *       object_name: string
       *       // 完整的访问URL
       *       // [required]
       *       url: string
       *       // 缩略图URL
       *       // [required]
       *       thumbnail_url: string
       *       // 文件MIME类型
       *       // [required]
       *       content_type: string
       *       // 文件大小(bytes)
       *       // [required]
       *       size: number
       *       // 图片宽度(px)
       *       // [required]
       *       width: number
       *       // 图片高度(px)
       *       // [required]
       *       height: number
       *       // 上传者IP
       *       // [required]
       *       upload_ip: string
       *       // 上传者ID
       *       // [required]
       *       user_id: string
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *     }>
       *     // 总数量
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      ListByUser<
        Config extends Alova2MethodConfig<ListByUserResponse> & {
          params: {
            /**
             * 用户ID
             * [required]
             */
            user_id: string;
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ListByUserResponse, 'image_auth.ListByUser', Config>;
      /**
       * ---
       *
       * [POST] 上传图片
       *
       * **path:** /api/image/upload
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] ImageInfo
       *   // [required]
       *   data: {
       *     // 图片ID
       *     // [required]
       *     image_id: string
       *     // MinIO bucket名称
       *     // [required]
       *     bucket_name: string
       *     // MinIO中的对象名称
       *     // [required]
       *     object_name: string
       *     // 完整的访问URL
       *     // [required]
       *     url: string
       *     // 缩略图URL
       *     // [required]
       *     thumbnail_url: string
       *     // 文件MIME类型
       *     // [required]
       *     content_type: string
       *     // 文件大小(bytes)
       *     // [required]
       *     size: number
       *     // 图片宽度(px)
       *     // [required]
       *     width: number
       *     // 图片高度(px)
       *     // [required]
       *     height: number
       *     // 上传者IP
       *     // [required]
       *     upload_ip: string
       *     // 上传者ID
       *     // [required]
       *     user_id: string
       *     // 创建时间
       *     // [required]
       *     created_at: number
       *   }
       * }
       * ```
       */
      Upload<Config extends Alova2MethodConfig<UploadResponse>>(
        config?: Config
      ): Alova2Method<UploadResponse, 'image_auth.Upload', Config>;
    };
    message_auth: {
      /**
       * ---
       *
       * [DELETE] 删除消息
       *
       * **path:** /api/message/delete/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteMessage<
        Config extends Alova2MethodConfig<DeleteMessageResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteMessage;
        }
      >(
        config: Config
      ): Alova2Method<DeleteMessageResp, 'message_auth.DeleteMessage', Config>;
      /**
       * ---
       *
       * [GET] 获取消息列表
       *
       * **path:** /api/message/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   page_size: number
       *   // [required]
       *   type: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] MessageList
       *   // [required]
       *   data: {
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       senderID: string
       *       // [required]
       *       receiverID: string
       *       // [required]
       *       type: number
       *       // [required]
       *       entityID: string
       *       // [required]
       *       content: string
       *       // [required]
       *       isRead: boolean
       *       // [title] UserInfo
       *       // [required]
       *       senderInfo: {
       *         // 用户ID
       *         // [required]
       *         id: string
       *         // 用户名
       *         // [required]
       *         username: string
       *         // 昵称
       *         // [required]
       *         nickname: string
       *         // 邮箱
       *         // [required]
       *         email: string
       *         // 手机号
       *         // [required]
       *         phone: string
       *         // 头像
       *         // [required]
       *         avatar: string
       *         // 性别 0:未知 1:男 2:女
       *         // [required]
       *         gender: '0' | '1'
       *         // 年龄
       *         // [required]
       *         age: number
       *         // 状态 true:正常 false:禁用
       *         // [required]
       *         status: boolean
       *         // 角色 0:普通用户 1:管理员
       *         // [required]
       *         is_admin: boolean
       *         // 创建时间
       *         // [required]
       *         create_at: number
       *         // 更新时间
       *         // [required]
       *         update_at: number
       *         // 关注数量
       *         // [required]
       *         follow_count: number
       *         // 粉丝数量
       *         // [required]
       *         fans_count: number
       *         // 是否已关注
       *         // [required]
       *         is_followed: boolean
       *         // 文章数量
       *         // [required]
       *         article_count: number
       *       }
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      ListMessage<
        Config extends Alova2MethodConfig<GetMessageListResp> & {
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            page_size: number;
            /**
             * [required]
             */
            type: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetMessageListResp, 'message_auth.ListMessage', Config>;
      /**
       * ---
       *
       * [GET] 获取是否有未读消息
       *
       * **path:** /api/message/unread
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] UnreadMessage
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *   }
       * }
       * ```
       */
      GetUnReadMessageCount<Config extends Alova2MethodConfig<GetUnreadMessageResp>>(
        config?: Config
      ): Alova2Method<GetUnreadMessageResp, 'message_auth.GetUnReadMessageCount', Config>;
    };
    question_bank_category_auth: {
      /**
       * ---
       *
       * [POST] 创建题库分类
       *
       * **path:** /api/question_bank_category/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   name: string
       *   // [required]
       *   description: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateQuestionBankCategory<
        Config extends Alova2MethodConfig<CreateQuestionBankCategoryResp> & {
          data: CreateQuestionBankCategoryReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateQuestionBankCategoryResp, 'question_bank_category_auth.CreateQuestionBankCategory', Config>;
      /**
       * ---
       *
       * [DELETE] 删除题库分类
       *
       * **path:** /api/question_bank_category/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteQuestionBankCategory<
        Config extends Alova2MethodConfig<DeleteQuestionBankCategoryResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteQuestionBankCategoryReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteQuestionBankCategoryResp, 'question_bank_category_auth.DeleteQuestionBankCategory', Config>;
    };
    question_bank_category_public: {
      /**
       * ---
       *
       * [GET] 获取题库分类列表
       *
       * **path:** /api/question_bank_category/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] QuestionBankCategoryList
       *   // [required]
       *   data: {
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       name: string
       *       // [required]
       *       description: string
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListQuestionBankCategory<Config extends Alova2MethodConfig<GetQuestionBankCategoryListResp>>(
        config?: Config
      ): Alova2Method<
        GetQuestionBankCategoryListResp,
        'question_bank_category_public.ListQuestionBankCategory',
        Config
      >;
    };
    questions_auth: {
      /**
       * ---
       *
       * [POST] 创建题库
       *
       * **path:** /api/questions/bank/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   categoryId: string
       *   // [required]
       *   name: string
       *   // [required]
       *   description: string
       *   // [required]
       *   difficulty: 'default' | 'easy' | 'medium' | 'hard'
       *   // [required]
       *   tags: string[]
       *   // 封面图片 URL
       *   // [required]
       *   coverImage: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 题库详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateQuestionBank<
        Config extends Alova2MethodConfig<CreateQuestionBankResp> & {
          data: CreateQuestionBankReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateQuestionBankResp, 'questions_auth.CreateQuestionBank', Config>;
      /**
       * ---
       *
       * [DELETE] 删除题库
       *
       * **path:** /api/questions/bank/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否删除成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteQuestionBank<
        Config extends Alova2MethodConfig<DeleteQuestionBankResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteQuestionBankReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteQuestionBankResp, 'questions_auth.DeleteQuestionBank', Config>;
      /**
       * ---
       *
       * [POST] 创建题目
       *
       * **path:** /api/questions/question/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   title: string
       *   // [required]
       *   bankId: string
       *   // [required]
       *   content: string
       *   // [required]
       *   difficulty: 'default' | 'easy' | 'medium' | 'hard'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 题目详情
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateQuestion<
        Config extends Alova2MethodConfig<CreateQuestionResp> & {
          data: CreateQuestionReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateQuestionResp, 'questions_auth.CreateQuestion', Config>;
      /**
       * ---
       *
       * [DELETE] 删除题目
       *
       * **path:** /api/questions/question/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否删除成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteQuestion<
        Config extends Alova2MethodConfig<DeleteQuestionResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteQuestionReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteQuestionResp, 'questions_auth.DeleteQuestion', Config>;
    };
    questions_public: {
      /**
       * ---
       *
       * [GET] 获取题库详情
       *
       * **path:** /api/questions/bank/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] GetQuestionBankResqonse
       *   // [required]
       *   data: {
       *     id?: string
       *     name?: string
       *     description?: string
       *     difficulty?: string
       *     tags?: string[]
       *     // [title] ImageInfo
       *     coverImage?: {
       *       // 图片ID
       *       // [required]
       *       image_id: string
       *       // MinIO bucket名称
       *       // [required]
       *       bucket_name: string
       *       // MinIO中的对象名称
       *       // [required]
       *       object_name: string
       *       // 完整的访问URL
       *       // [required]
       *       url: string
       *       // 缩略图URL
       *       // [required]
       *       thumbnail_url: string
       *       // 文件MIME类型
       *       // [required]
       *       content_type: string
       *       // 文件大小(bytes)
       *       // [required]
       *       size: number
       *       // 图片宽度(px)
       *       // [required]
       *       width: number
       *       // 图片高度(px)
       *       // [required]
       *       height: number
       *       // 上传者IP
       *       // [required]
       *       upload_ip: string
       *       // 上传者ID
       *       // [required]
       *       user_id: string
       *       // 创建时间
       *       // [required]
       *       created_at: number
       *     }
       *     // [title] UserInfo
       *     createUser?: {
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }
       *     createdAt?: number
       *     updatedAt?: number
       *     // 是否收藏
       *     // [required]
       *     isFavorited: boolean
       *   }
       * }
       * ```
       */
      GetQuestionBankDetail<
        Config extends Alova2MethodConfig<GetQuestionBankDetailResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetQuestionBankDetailResp, 'questions_public.GetQuestionBankDetail', Config>;
      /**
       * ---
       *
       * [GET] 获取题库列表
       *
       * **path:** /api/questions/bank_list/{categoryId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   categoryId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] QuestionBankList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       name: string
       *       // [required]
       *       description: string
       *       // [required]
       *       difficulty: string
       *       // [required]
       *       tags: string[]
       *       // [title] ImageInfo
       *       // [required]
       *       coverImage: {
       *         // 图片ID
       *         // [required]
       *         image_id: string
       *         // MinIO bucket名称
       *         // [required]
       *         bucket_name: string
       *         // MinIO中的对象名称
       *         // [required]
       *         object_name: string
       *         // 完整的访问URL
       *         // [required]
       *         url: string
       *         // 缩略图URL
       *         // [required]
       *         thumbnail_url: string
       *         // 文件MIME类型
       *         // [required]
       *         content_type: string
       *         // 文件大小(bytes)
       *         // [required]
       *         size: number
       *         // 图片宽度(px)
       *         // [required]
       *         width: number
       *         // 图片高度(px)
       *         // [required]
       *         height: number
       *         // 上传者IP
       *         // [required]
       *         upload_ip: string
       *         // 上传者ID
       *         // [required]
       *         user_id: string
       *         // 创建时间
       *         // [required]
       *         created_at: number
       *       }
       *       // [title] UserInfo
       *       // [required]
       *       createUser: {
       *         // 用户ID
       *         // [required]
       *         id: string
       *         // 用户名
       *         // [required]
       *         username: string
       *         // 昵称
       *         // [required]
       *         nickname: string
       *         // 邮箱
       *         // [required]
       *         email: string
       *         // 手机号
       *         // [required]
       *         phone: string
       *         // 头像
       *         // [required]
       *         avatar: string
       *         // 性别 0:未知 1:男 2:女
       *         // [required]
       *         gender: '0' | '1'
       *         // 年龄
       *         // [required]
       *         age: number
       *         // 状态 true:正常 false:禁用
       *         // [required]
       *         status: boolean
       *         // 角色 0:普通用户 1:管理员
       *         // [required]
       *         is_admin: boolean
       *         // 创建时间
       *         // [required]
       *         create_at: number
       *         // 更新时间
       *         // [required]
       *         update_at: number
       *         // 关注数量
       *         // [required]
       *         follow_count: number
       *         // 粉丝数量
       *         // [required]
       *         fans_count: number
       *         // 是否已关注
       *         // [required]
       *         is_followed: boolean
       *         // 文章数量
       *         // [required]
       *         article_count: number
       *       }
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListQuestionBanks<
        Config extends Alova2MethodConfig<GetQuestionBankListResp> & {
          pathParams: {
            /**
             * [required]
             */
            categoryId: string;
          };
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetQuestionBankListResp, 'questions_public.ListQuestionBanks', Config>;
      /**
       * ---
       *
       * [GET] 获取题目详情
       *
       * **path:** /api/questions/question/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] Question
       *   // [required]
       *   data: {
       *     // [required]
       *     id: string
       *     // [required]
       *     title: string
       *     // [required]
       *     bankId: string
       *     // [required]
       *     content: string
       *     // [required]
       *     difficult: string
       *     // [required]
       *     createdAt: number
       *     // [required]
       *     updatedAt: number
       *   }
       * }
       * ```
       */
      GetQuestionBank<
        Config extends Alova2MethodConfig<GetQuestionBankResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetQuestionBankResp, 'questions_public.GetQuestionBank', Config>;
      /**
       * ---
       *
       * [GET] 获取题目列表
       *
       * **path:** /api/questions/question_list/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] QuestionList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       title: string
       *       // [required]
       *       difficult: string
       *     }>
       *   }
       * }
       * ```
       */
      ListQuestions<
        Config extends Alova2MethodConfig<GetQuestionListResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetQuestionListResp, 'questions_public.ListQuestions', Config>;
    };
    school_exp_auth: {
      /**
       * ---
       *
       * [POST] 创建学校经历
       *
       * **path:** /api/school_exp/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   education: string
       *   // [required]
       *   school: string
       *   // [required]
       *   major: string
       *   // [required]
       *   workExp: string
       *   // [required]
       *   content: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateSchoolExp<
        Config extends Alova2MethodConfig<CreateSchoolExpResp> & {
          data: CreateSchoolExpReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateSchoolExpResp, 'school_exp_auth.CreateSchoolExp', Config>;
      /**
       * ---
       *
       * [DELETE] 删除学校经历
       *
       * **path:** /api/school_exp/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteSchoolExp<
        Config extends Alova2MethodConfig<DeleteSchoolExpResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteSchoolExpReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteSchoolExpResp, 'school_exp_auth.DeleteSchoolExp', Config>;
    };
    school_exp_public: {
      /**
       * ---
       *
       * [GET] 获取学校经历列表
       *
       * **path:** /api/school_exp/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   page_size: number
       *   education?: string
       *   school?: string
       *   major?: string
       *   workExp?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] SchoolExpList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       education: string
       *       // [required]
       *       school: string
       *       // [required]
       *       major: string
       *       // [required]
       *       workExp: string
       *       // [required]
       *       content: string
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *       // [required]
       *       userId: string
       *     }>
       *   }
       * }
       * ```
       */
      ListSchoolExp<
        Config extends Alova2MethodConfig<GetSchoolExpListResp> & {
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            page_size: number;
            education?: string;
            school?: string;
            major?: string;
            workExp?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetSchoolExpListResp, 'school_exp_public.ListSchoolExp', Config>;
    };
    tag_auth: {
      /**
       * ---
       *
       * [POST] 创建分类标签
       *
       * **path:** /api/tag/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 标签名称
       *   // [required]
       *   name: string
       *   // 标签描述
       *   // [required]
       *   description: string
       *   // 是否为系统标签
       *   // [required]
       *   is_system_provider: boolean
       *   // 标签图标
       *   // [required]
       *   icon: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateTag<
        Config extends Alova2MethodConfig<CreateTagResp> & {
          data: CreateTagReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateTagResp, 'tag_auth.CreateTag', Config>;
      /**
       * ---
       *
       * [DELETE] 删除分类标签
       *
       * **path:** /api/tag/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteTag<
        Config extends Alova2MethodConfig<DeleteTagResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteTagReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteTagResp, 'tag_auth.DeleteTag', Config>;
    };
    tag_public: {
      /**
       * ---
       *
       * [GET] 获取全部分类标签（包含系统和用户自定义的标签）
       *
       * **path:** /api/tag/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] TagList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // 标签 ID
       *       // [required]
       *       id: string
       *       // 标签名称
       *       // [required]
       *       name: string
       *       // 标签描述
       *       // [required]
       *       description: string
       *       // 是否为系统标签
       *       // [required]
       *       is_system_provider: boolean
       *       // 标签图标
       *       // [required]
       *       icon: string
       *       // 标签使用次数
       *       // [required]
       *       usage_count: number
       *       // 创建时间
       *       // [required]
       *       createdAt: number
       *       // 更新时间
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      GetAllTagList<
        Config extends Alova2MethodConfig<GetTagListResp> & {
          params: {
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetTagListResp, 'tag_public.GetAllTagList', Config>;
      /**
       * ---
       *
       * [GET] 获取系统分类标签
       *
       * **path:** /api/tag/system/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] TagList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // 标签 ID
       *       // [required]
       *       id: string
       *       // 标签名称
       *       // [required]
       *       name: string
       *       // 标签描述
       *       // [required]
       *       description: string
       *       // 是否为系统标签
       *       // [required]
       *       is_system_provider: boolean
       *       // 标签图标
       *       // [required]
       *       icon: string
       *       // 标签使用次数
       *       // [required]
       *       usage_count: number
       *       // 创建时间
       *       // [required]
       *       createdAt: number
       *       // 更新时间
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      GetSystemTagList<Config extends Alova2MethodConfig<GetTagListResp>>(
        config?: Config
      ): Alova2Method<GetTagListResp, 'tag_public.GetSystemTagList', Config>;
    };
    user_auth: {
      /**
       * ---
       *
       * [POST] 修改密码
       *
       * **path:** /api/user/change_password
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 旧密码
       *   // [required]
       *   old_password: string
       *   // 新密码
       *   // [required]
       *   new_password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否修改成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      ChangePassword<
        Config extends Alova2MethodConfig<UpdatePasswordResp> & {
          data: UpdatePasswordReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdatePasswordResp, 'user_auth.ChangePassword', Config>;
      /**
       * ---
       *
       * [DELETE] 删除用户
       *
       * **path:** /api/user/delete/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否删除成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteUser<
        Config extends Alova2MethodConfig<DeleteUserResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteUserReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteUserResp, 'user_auth.DeleteUser', Config>;
      /**
       * ---
       *
       * [GET] 根据用户的token获取用户信息
       *
       * **path:** /api/user/info_by_token
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] UserInfo
       *   // [required]
       *   data: {
       *     // 用户ID
       *     // [required]
       *     id: string
       *     // 用户名
       *     // [required]
       *     username: string
       *     // 昵称
       *     // [required]
       *     nickname: string
       *     // 邮箱
       *     // [required]
       *     email: string
       *     // 手机号
       *     // [required]
       *     phone: string
       *     // 头像
       *     // [required]
       *     avatar: string
       *     // 性别 0:未知 1:男 2:女
       *     // [required]
       *     gender: '0' | '1'
       *     // 年龄
       *     // [required]
       *     age: number
       *     // 状态 true:正常 false:禁用
       *     // [required]
       *     status: boolean
       *     // 角色 0:普通用户 1:管理员
       *     // [required]
       *     is_admin: boolean
       *     // 创建时间
       *     // [required]
       *     create_at: number
       *     // 更新时间
       *     // [required]
       *     update_at: number
       *     // 关注数量
       *     // [required]
       *     follow_count: number
       *     // 粉丝数量
       *     // [required]
       *     fans_count: number
       *     // 是否已关注
       *     // [required]
       *     is_followed: boolean
       *     // 文章数量
       *     // [required]
       *     article_count: number
       *   }
       * }
       * ```
       */
      GetUserInfoByToken<Config extends Alova2MethodConfig<GetUserInfoResp>>(
        config?: Config
      ): Alova2Method<GetUserInfoResp, 'user_auth.GetUserInfoByToken', Config>;
      /**
       * ---
       *
       * [PUT] 更新用户信息
       *
       * **path:** /api/user/update/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 昵称
       *   nickname?: string
       *   // 邮箱
       *   email?: string
       *   // 手机号
       *   phone?: string
       *   // 性别 0:未知 1:男 2:女
       *   gender?: '0' | '1'
       *   // 年龄
       *   age?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否更新成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateUserInfo<
        Config extends Alova2MethodConfig<UpdateUserInfoResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateUserInfoReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateUserInfoResp, 'user_auth.UpdateUserInfo', Config>;
      /**
       * ---
       *
       * [PUT] 更新用户头像
       *
       * **path:** /api/user/update_avatar
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 头像
       *   // [required]
       *   avatar: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否更新成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      UpdateUserAvatar<
        Config extends Alova2MethodConfig<UpdateUserAvatarResp> & {
          data: UpdateUserAvatarReq;
        }
      >(
        config: Config
      ): Alova2Method<UpdateUserAvatarResp, 'user_auth.UpdateUserAvatar', Config>;
    };
    user_public: {
      /**
       * ---
       *
       * [GET] 获取用户信息
       *
       * **path:** /api/user/info/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] UserInfo
       *   // [required]
       *   data: {
       *     // 用户ID
       *     // [required]
       *     id: string
       *     // 用户名
       *     // [required]
       *     username: string
       *     // 昵称
       *     // [required]
       *     nickname: string
       *     // 邮箱
       *     // [required]
       *     email: string
       *     // 手机号
       *     // [required]
       *     phone: string
       *     // 头像
       *     // [required]
       *     avatar: string
       *     // 性别 0:未知 1:男 2:女
       *     // [required]
       *     gender: '0' | '1'
       *     // 年龄
       *     // [required]
       *     age: number
       *     // 状态 true:正常 false:禁用
       *     // [required]
       *     status: boolean
       *     // 角色 0:普通用户 1:管理员
       *     // [required]
       *     is_admin: boolean
       *     // 创建时间
       *     // [required]
       *     create_at: number
       *     // 更新时间
       *     // [required]
       *     update_at: number
       *     // 关注数量
       *     // [required]
       *     follow_count: number
       *     // 粉丝数量
       *     // [required]
       *     fans_count: number
       *     // 是否已关注
       *     // [required]
       *     is_followed: boolean
       *     // 文章数量
       *     // [required]
       *     article_count: number
       *   }
       * }
       * ```
       */
      GetUserInfo<
        Config extends Alova2MethodConfig<GetUserInfoResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetUserInfoResp, 'user_public.GetUserInfo', Config>;
      /**
       * ---
       *
       * [GET] 获取用户列表
       *
       * **path:** /api/user/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 页码
       *   // [required]
       *   page: number
       *   // 每页数量
       *   // [required]
       *   page_size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] UserList
       *   // [required]
       *   data: {
       *     // 总数
       *     // [required]
       *     total: number
       *     // 用户列表
       *     // [required]
       *     list: Array<{
       *       // 用户ID
       *       // [required]
       *       id: string
       *       // 用户名
       *       // [required]
       *       username: string
       *       // 昵称
       *       // [required]
       *       nickname: string
       *       // 邮箱
       *       // [required]
       *       email: string
       *       // 手机号
       *       // [required]
       *       phone: string
       *       // 头像
       *       // [required]
       *       avatar: string
       *       // 性别 0:未知 1:男 2:女
       *       // [required]
       *       gender: '0' | '1'
       *       // 年龄
       *       // [required]
       *       age: number
       *       // 状态 true:正常 false:禁用
       *       // [required]
       *       status: boolean
       *       // 角色 0:普通用户 1:管理员
       *       // [required]
       *       is_admin: boolean
       *       // 创建时间
       *       // [required]
       *       create_at: number
       *       // 更新时间
       *       // [required]
       *       update_at: number
       *       // 关注数量
       *       // [required]
       *       follow_count: number
       *       // 粉丝数量
       *       // [required]
       *       fans_count: number
       *       // 是否已关注
       *       // [required]
       *       is_followed: boolean
       *       // 文章数量
       *       // [required]
       *       article_count: number
       *     }>
       *   }
       * }
       * ```
       */
      GetUserList<
        Config extends Alova2MethodConfig<GetUserListResp> & {
          params: {
            /**
             * 页码
             * [required]
             */
            page: number;
            /**
             * 每页数量
             * [required]
             */
            page_size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetUserListResp, 'user_public.GetUserList', Config>;
      /**
       * ---
       *
       * [POST] 用户登录
       *
       * **path:** /api/user/login
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用户名
       *   // [required]
       *   username: string
       *   // 密码
       *   // [required]
       *   password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // JWT token
       *   // [required]
       *   data: string
       * }
       * ```
       */
      Login<
        Config extends Alova2MethodConfig<LoginResp> & {
          data: LoginReq;
        }
      >(
        config: Config
      ): Alova2Method<LoginResp, 'user_public.Login', Config>;
      /**
       * ---
       *
       * [POST] 用户注册
       *
       * **path:** /api/user/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用户名
       *   // [required]
       *   username: string
       *   // 密码
       *   // [required]
       *   password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否注册成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      Register<
        Config extends Alova2MethodConfig<RegisterResp> & {
          data: RegisterReq;
        }
      >(
        config: Config
      ): Alova2Method<RegisterResp, 'user_public.Register', Config>;
      /**
       * ---
       *
       * [POST] 通过链接重置密码
       *
       * **path:** /api/user/reset-password-by-link
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   email: string
       *   // [required]
       *   password: string
       *   // [required]
       *   confirmPassword: string
       *   // [required]
       *   token: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否重置成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      ResetPasswordByLink<
        Config extends Alova2MethodConfig<ResetPasswordByLinkResp> & {
          data: ResetPasswordByLinkReq;
        }
      >(
        config: Config
      ): Alova2Method<ResetPasswordByLinkResp, 'user_public.ResetPasswordByLink', Config>;
      /**
       * ---
       *
       * [POST] 发送重置密码链接
       *
       * **path:** /api/user/send-reset-password-link
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 邮箱
       *   // [required]
       *   email: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // 是否发送成功
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      SendResetPasswordLink<
        Config extends Alova2MethodConfig<SendResetPasswordLinkResp> & {
          data: SendResetPasswordLinkReq;
        }
      >(
        config: Config
      ): Alova2Method<SendResetPasswordLinkResp, 'user_public.SendResetPasswordLink', Config>;
    };
    work_exp_auth: {
      /**
       * ---
       *
       * [POST] 创建工作经历
       *
       * **path:** /api/work_exp/create
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   workExp: string
       *   // [required]
       *   company: string
       *   // [required]
       *   position: string
       *   // [required]
       *   region: string
       *   // [required]
       *   content: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      CreateWorkExp<
        Config extends Alova2MethodConfig<CreateWorkExpResp> & {
          data: CreateWorkExpReq;
        }
      >(
        config: Config
      ): Alova2Method<CreateWorkExpResp, 'work_exp_auth.CreateWorkExp', Config>;
      /**
       * ---
       *
       * [DELETE] 删除工作经历
       *
       * **path:** /api/work_exp/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [required]
       *   data: boolean
       * }
       * ```
       */
      DeleteWorkExp<
        Config extends Alova2MethodConfig<DeleteWorkExpResp> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: DeleteWorkExpReq;
        }
      >(
        config: Config
      ): Alova2Method<DeleteWorkExpResp, 'work_exp_auth.DeleteWorkExp', Config>;
    };
    work_exp_public: {
      /**
       * ---
       *
       * [GET] 获取工作经历列表
       *
       * **path:** /api/work_exp/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   page_size: number
       *   workExp?: string
       *   company?: string
       *   position?: string
       *   region?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 状态码
       *   code?: number
       *   // 提示信息
       *   message?: string
       *   // [title] WorkExpList
       *   // [required]
       *   data: {
       *     // [required]
       *     total: number
       *     // [required]
       *     list: Array<{
       *       // [required]
       *       id: string
       *       // [required]
       *       workExp: string
       *       // [required]
       *       company: string
       *       // [required]
       *       region: string
       *       // [required]
       *       position: string
       *       // [required]
       *       content: string
       *       // [required]
       *       userID: string
       *       // [required]
       *       createdAt: number
       *       // [required]
       *       updatedAt: number
       *     }>
       *   }
       * }
       * ```
       */
      ListWorkExp<
        Config extends Alova2MethodConfig<GetWorkExpListResp> & {
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            page_size: number;
            workExp?: string;
            company?: string;
            position?: string;
            region?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GetWorkExpListResp, 'work_exp_public.ListWorkExp', Config>;
    };
  }

  var Apis: Apis;
}
